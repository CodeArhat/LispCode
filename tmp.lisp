(defun round-demo7 ()
  (let* ((flst (list #'eval #'floor #'ceiling #'round #'truncate))
         (hlst '(0.1 0.5 0.6 1.0 1.1))
         (xlst (append (mapcar #'- (reverse hlst)) '(0) hlst)))
    (dolist (fn flst)
      (format t "~20a:~{~5,1f~}~%" fn (mapcar (lambda (x) (funcall fn x)) xlst)))))
(defun round-demo0 ()
  (let ((flst (list #'floor #'ceiling #'round #'truncate))
        (xlst '(-1.1 -1.0 -0.6 -0.5 -0.1 0 0.1 0.5 0.6 1.0 1.1)))
    (format t "~20a:" "param")
    (dolist (x xlst)
      (format t "~5,1f" x))
    (format t "~%")
    (dolist (fun flst)
      (format t "~20a:" fun)
      (dolist (x xlst)
        (format t "~5,1f" (funcall fun x)))
      (format t "~%"))))
